name: Build release

# on:
#   push:
#     tags:
#       - '[0-9]+\.[0-9]+\.[0-9]+'
on: [push]

jobs:
  publish-to-github-linux:
    name: Publish release Linux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install Nix
      uses: nixbuild/nix-quick-install-action@v12
      with:
        nix_conf: experimental-features = nix-command flakes

    - name: Build with Nix
      run: nix build

    - name: Package Artifacts
      run: |
        src=$(pwd)
        stage=$(mktemp -d)
        ver=${GITHUB_REF#refs/tags/}
        asset_name="mdoc-$ver-x86_64-unknown-linux-musl.tar.gz"
        ASSET_PATH="$src/$ASSET_NAME"
        CHECKSUM_PATH="$ASSET_PATH.sha256"

        cp result/bin/mdoc $stage/
        cd $stage

        tar czf $ASSET_PATH *
        cd $src
        sha256sum $asset_name > $CHECKSUM_PATH

        echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
        echo "CHECKSUM_PATH=$CHECKSUM_PATH" >> $GITHUB_ENV

    # - name: Release
    #   uses: softprops/action-gh-release@v1
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     files: |
    #       ${{ env.ASSET_PATH }}
    #       ${{ env.CHECKSUM_PATH }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-github-macos:
    name: Publish release MacOS
    runs-on: macos-10.15
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install Nix
      uses: nixbuild/nix-quick-install-action@v12
      with:
        nix_conf: experimental-features = nix-command flakes

    - name: Build with Nix
      run: nix build

    - name: Package Artifacts
      run: |
        src=$(pwd)
        stage=$(mktemp -d -t tmp)
        ver=${GITHUB_REF#refs/tags/}
        asset_name="mdoc-$ver-x86_64-unknown-linux-musl.tar.gz"
        ASSET_PATH="$src/$ASSET_NAME"
        CHECKSUM_PATH="$ASSET_PATH.sha256"

        cp result/bin/mdoc $stage/
        cd $stage

        zip -r $ASSET_PATH *
        cd $src
        shasum -a 256 $asset_name > $CHECKSUM_PATH

        echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
        echo "CHECKSUM_PATH=$CHECKSUM_PATH" >> $GITHUB_ENV

    # - name: Release
    #   uses: softprops/action-gh-release@v1
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     files: |
    #       ${{ env.ASSET_PATH }}
    #       ${{ env.CHECKSUM_PATH }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-github-windows:
    name: Publish release Windows
    runs-on: windows-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Cache
      uses: actions/cache@v2
      with:
        path: |
          C:\Users\runneradmin\.cargo
          C:\Users\runneradmin\.rustup
          target
        key: windows-stable

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: x86_64-pc-windows-msvc

    - name: Install cargo-vcpkg
      uses: actions-rs/install@v0.1
      with:
        crate: cargo-vcpkg
        use-tool-cache: true

    - name: Build VCPKG dependencies
      run: cargo vcpkg build

    - name: Set environment variables
      run: |
        echo "VCPKG_ROOT=${pwd}\target\vcpkg" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        echo "TECTONIC_DEP_BACKEND=vcpkg" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        echo "RUSTFLAGS=-Ctarget-feature=+crt-static" |Â Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release

    # - name: Release
    #   uses: softprops/action-gh-release@v1
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     files: target/release/mdoc.exe
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
