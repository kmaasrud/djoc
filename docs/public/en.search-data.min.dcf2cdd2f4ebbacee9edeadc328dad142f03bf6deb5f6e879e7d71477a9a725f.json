[{"id":0,"href":"/mdoc/markdown/block-quotes/","title":"Block Quotes","section":"Markdowns","content":"Pandoc Markdown uses email conventions for block quotes. A block quotation is one or more paragraphs or other block elements (such as lists or headings), with each line preceded by a \u0026gt; character and an optional space.\n\u0026gt; This is a block quote. This \u0026gt; paragraph has two lines. \u0026gt; \u0026gt; 1. This is a list inside a block quote. \u0026gt; 2. Second item. Block quotes can contain most other Markdown elements. Among them are other blockquotes, which means they can be nested, like this:\n\u0026gt; This is a block quote. \u0026gt; \u0026gt; \u0026gt; A block quote within a block quote. Standard Markdown syntax does not require a blank line before a block quote. MDoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a \u0026gt; to end up at the beginning of a line by accident (perhaps through line wrapping).\n"},{"id":1,"href":"/mdoc/markdown/code/","title":"Code","section":"Markdowns","content":"Indented code blocks #  A block of text indented four spaces (or one tab) is treated as a code block. For example,\nParagraph here if (a \u0026gt; 3) { moveShip(5 * gravity, DOWN); } The initial (four space or one tab) indentation is not considered part of the verbatim text, and is removed in the output.\nFenced code blocks #  In addition to standard indented code blocks, you can write fenced code blocks. These begin with a row of three or more backticks (```) and end with a row of backticks that must be at least as long as the starting row. Everything between these lines is treated as code and no indentation is necessary:\n``` if (a \u0026gt; 3) { moveShip(5 * gravity, DOWN); } ``` Like regular code blocks, fenced code blocks must be separated from surrounding text by blank lines. If the code itself contains a row of backticks, just use a longer row of tildes or backticks at the start and end:\n`````` ``` if (a \u0026gt; 3) { moveShip(5 * gravity, DOWN); } ``` `````` If you want to specify the language of the code block, you can write\n```rust match foo { Some(a) =\u0026gt; println!(\u0026#34;Something: {}\u0026#34;, a), None =\u0026gt; println!(\u0026#34;Nothing\u0026#34;) } ``` This is just a shorthand for attaching the language as a class, like {.rust}. You can attach further attributes to a fenced code block by using this syntax:\n```{#mycode .haskell .numberLines startFrom=\u0026#34;100\u0026#34;} qsort [] = [] qsort (x:xs) = qsort (filter (\u0026lt; x) xs) ++ [x] ++ qsort (filter (\u0026gt;= x) xs) ``` Here mycode is an identifier, haskell and numberLines are classes, and startFrom is an attribute with value 100.\nInline code #  To write inline code, put the text between backticks, e.g.\nWhat is the difference between `\u0026gt;\u0026gt;=` and `\u0026gt;\u0026gt;`? If you want to include a literal backtick as part of the code, use double backticks (the spaces before and after the enclosed backtick will be ignored.)\nHere is a literal backtick `` ` ``.  üìñ Backslash-escapes (and other Markdown constructs) do not work inside verbatim (code) contexts:\nThis is a backslash followed by an asterisk: `\\*`.  As with code blocks, you can attach attributes to inline code as well. The syntax is similar:\nThis is Haskell code: `\u0026lt;$\u0026gt;`{.haskell} "},{"id":2,"href":"/mdoc/markdown/formatting/","title":"Formatting","section":"Markdowns","content":"Bold and italic text #  To make text italic, surround it with single * or _ symbols, like this:\nThis text is _italicized with underscores_, and this is *italicized with asterisks*. Surrounding with double * or _ symbols, produces bold text, e.g.\nThis is **bold text** and __with underscores__. A * or _ character surrounded by spaces, or backslash-escaped, will not trigger emphasis:\nThis is * not emphasized *, and \\*neither is this\\*. Because _ is sometimes used inside words or identifiers, Pandoc will not interpret _ as a marker if it\u0026rsquo;s surrounded by characters. For this reason, it is advised to use * to avoid having to shift markers throughout the text.\nStrikeout #  You can strikeout text by surrounding it with ~~. For example:\nThis ~~is deleted text.~~ Superscript and subscript #  Superscripts may be written by surrounding the superscripted text by ^ characters (intuitively enough); subscripts may be written by surrounding the subscripted text with ~ characters (not as intuitive.) Thus, for example,\nH~2~O is a liquid. 2^10^ is 1024.  üìñ The text between ^...^ or ~...~ may not contain spaces or newlines. If the superscripted or subscripted text contains spaces, these spaces must be escaped with backslashes. (This is to prevent accidental superscripting and subscripting through the ordinary use of ~ and ^, as well as bad interactions with footnotes.) Thus, if you want the letter P with ‚Äòa cat‚Äô in subscripts, you write P~a\\ cat~, not P~a cat~.\n "},{"id":3,"href":"/mdoc/markdown/headings/","title":"Headings","section":"Markdowns","content":"There are two kinds of headings: Setext and ATX. They are equivalent, so choose the style you prefer. Both heading types can contain inline formatting or math.\nATX headers #  An ATX heading consists of one to six # signs and a line of text, optionally followed by any number of # signs. The number of # signs at the beginning of the line is the heading level:\n## A level-two heading  A paragraph or some other content. ### A level-three heading ###  More content...  üìñ MDoc requires a blank line before and after a heading (except, of course, at the beginning of the document.) Additionally, a space between the opening # signs of an ATX heading and the heading text is required.\n Setext headers #  A setext-style heading is a line of text underlined with a row of = signs (for a level-one heading) or - signs (for a level-two heading):\nA level-one heading =================== A paragraph or some content. A level-two heading ------------------- More content... Identifiers #  Headings can be assigned attributes using the following syntax at the end of the line containing the heading text:\n{#identifier .class .class key=value key=value}  Thus, for example, the following headings will all be assigned the identifier foo:\n# My heading {#foo} ## My heading ## {#foo}  My other heading {#foo} ---------------  üìñ All headers are automatically assigned an identifier corresponding to their kebab cased title (e.g. # This is my header! will have the identifier #this-is-my-header.)\n Numbering of headers #  You can enable numbering of headers by setting number-sections = true under [style] in mdoc.toml. If you want to avoid numbering on certain headers, simply specify the class unnumbered on them. A single hyphen ({-}) is equivalent to this, so the following headers:\n# My heading {-} # My heading {.unnumbered} will never be numbered.\n"},{"id":4,"href":"/mdoc/markdown/images-and-figures/","title":"Images and Figures","section":"Markdowns","content":"A link immediately preceded by a ! will be treated as an image.\n![](image-path.jpg) ![movie reel] [movie reel]: movie.gif ![figure caption](another-image.png) As you can see, you set the caption of the figure within the link text field. The attribute syntax is also supported on images, meaning you can define identifiers, classes and key-value pairs on images as well.\nAn inline ![image](foo.jpg){#id .class width=30 height=20px} and a reference ![image][ref] with attributes. [ref]: foo.jpg \u0026#34;optional title\u0026#34; {#id .class key=val key2=\u0026#34;val 2\u0026#34;} Sizing #  An image can be resized by utilizing the width and height keys. Say you want to insert an image, but make it half as big.\n![](file.jpg){ width=50% } 100% is defined by the text width, meaning the above will output a centered image that has half the width of the surrounding text.\n"},{"id":5,"href":"/mdoc/markdown/lists/","title":"Lists","section":"Markdowns","content":"Ordered lists #  To make an ordered list of items, write a decimal number, followed by a period, a space and the content you want as part of that list item.\n1. one 2. two 3. three This will produce a ‚Äúcompact‚Äù list. If you want a ‚Äúloose‚Äù list, in which each item is formatted as a paragraph, put spaces between the items:\n5. one 34. two 8. three Only the first number is parsed, which means the above list will be formatted as the sequence 5., 6. and 7.. You can make use of this by specifying only the starting number, and using a #. in place of the following numbers. However, in the name of legibilty I recommend writing the numbers as you intend them.\nMultiple styles of alphanumeric sequences are allowed. These are uppercase/lowercase letters and roman numerals, in addition to normal Arabic numerals. You can use the regular dot notation (2.), enclose the index in parentheses ((i)) or follow it by a single closing-parentheses (a)). This variation of styles is utilized when one needs a new list directly following another or to make a sublist. The following are all valid lists:\n9) Ninth 10) Tenth 11) Eleventh i. subone ii. subtwo iii. subthree (2) Two (5) Three 1. One #. Two The above will get rendered as such:\n Unordered lists #  An unordered list is a list of bulleted list items that are not numbered. They work exactly like ordered lists (except the numbering of course,) but use *, + or - as markers.\n- one - two - three The markers need not be flush with the left margin; they may be indented one, two, or three spaces. The marker must be followed by whitespace.\nTask lists #  You can also make unordered lists that have a checkmark, in order to create a task list. The Github-Flavored Markdown syntax is used, which is as follows\n- [ ] an unchecked task list item - [x] checked item  Block content in lists #  A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented to line up with the first non-space content after the list marker.\n* First paragraph. Continued. * Second paragraph. With a code block, which must be indented eight spaces: { code } List items may include other lists, like in the last ordered list example. In this case the preceding blank line is optional. The nested list must be indented to line up with the first non-space character after the list marker of the containing list item.\n* fruits + apples - macintosh - red delicious + pears + peaches * vegetables + broccoli + chard Markdown allows you to write list items ‚Äúlazily,‚Äù and reflow your text with a single newline instead of indenting continuation lines. However, if there are multiple paragraphs or other blocks in a list item, the first line of each must be indented.\n+ A lazy, lazy, list item. + Another one; this looks bad but is legal. Second paragraph of second list item. But what if you want to put an indented code block directly after a list? Consider the following:\n- item one - item two { my code block } { my code block } will here get treated as the second paragraph of the second list item. In order to ‚Äúcut off‚Äù the list after item two, you can insert some non-indented content (an HTML comment would be a great choice,) which won‚Äôt produce visible output in any format. An example of this could be:\n- item one - item two \u0026lt;!-- end of list --\u0026gt; { my code block }  Extra list types #  Definition lists #  Definition lists are made of terms and definitions of these terms, much like in a dictionary. A simple definition list is made of a single-line term followed by a colon and the definition for that term.\nApple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. { some code, part of Definition 2 } Third paragraph of definition 2. Each term must fit on one line, which may optionally be followed by a blank line, and must be followed by one or more definitions. A definition begins with a : or ~, which may be indented one or two spaces. A term may have multiple definitions, and each definition may consist of one or more block elements (paragraph, code block, list, etc.), each indented four spaces or one tab stop. The body of the definition (including the first line, aside from the : or ~) should be indented four spaces. However, as with other Markdown lists, you can ‚Äúlazily‚Äù omit indentation except at the beginning of a paragraph or other block element:\nTerm 1 : Definition with lazy continuation. Second paragraph of the definition. If you leave space before the definition (as in the example above), the text of the definition will be treated as a paragraph. In some output formats, this will mean greater spacing between term/definition pairs. For a more compact definition list, omit the space before the definition:\nTerm 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b Note that space between items in a definition list is required.\nNumbered example lists #  The special list marker @ can be used for sequentially numbered examples. The first list item with a @ marker will be numbered 1, the next 2, and so on, throughout the document. The numbered examples need not occur in a single list; each new list using @ will take up where the last stopped. So, for example:\n(@) My first example will be numbered (1). (@) My second example will be numbered (2). Explanation of examples. (@) My third example will be numbered (3). Numbered examples can be labeled and referred to elsewhere in the document:\n(@good) This is a good example. As (@good) illustrates, ... The label can be any string of alphanumeric characters, underscores, or hyphens.\n üìñ continuation paragraphs in example lists must always be indented four spaces, regardless of the length of the list marker. This is because example labels tend to be long, and indenting content to the first non-space character after the label would be awkward.\n "},{"id":6,"href":"/mdoc/markdown/markdown/","title":"Markdown","section":"Markdowns","content":"MDoc uses Pandoc Markdown (with a few carefully selected additions) as it\u0026rsquo;s markup language. This choice was a simple one; the creator of Markdown, John Gruber, puts it best himself:\n Markdown is intended to be as easy-to-read and easy-to-write as is feasible. Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it‚Äôs been marked up with tags or formatting instructions.\n This is at the heart of most of my choices when creating MDoc, as I\u0026rsquo;m sure also was the case for John MacFarlane when he made the canonical additions that make up Pandoc Markdown.\nBut why yet another Markdown flavor? Well, the goals of Pandoc, and subsequently of MDoc, is to produce a more complex output than a simple HTML page. To conform with the abovementioned philosophy, writing inline HTML or TeX (although permitted) to achieve this complexity, is simply not good enough. Thus, a few additions are needed, but should come as second nature to those already familiar with Markdown.\nThis part of the documentation contains a modified copy of Pandoc\u0026rsquo;s User Guide. I\u0026rsquo;ve done this to explain the syntax at the perspective of MDoc\u0026rsquo;s goals and to specify the changes and conventions MDoc introduces.\n"},{"id":7,"href":"/mdoc/markdown/math/","title":"Math","section":"Markdowns","content":"Inline math #  Anything between two $ characters will be treated as TeX math. For an excellent reference on what is possible here, have a look at the TeX reference card.\nThe opening $ must have a non-space character immediately to its right, while the closing $ must have a non-space character immediately to its left, and must not be followed immediately by a digit. Thus, $20,000 and $30,000 won‚Äôt parse as math. If for some reason you need to enclose text in literal $ characters, escape them with a blackslash and they won‚Äôt be treated as math delimiters.\nHere is some text and here is some math: $E = mc^2$. Display math #  For display math, use $$ delimiters. In this case, the delimiters may be separated from the formula by whitespace. However, there can be no blank lines betwen the opening and closing delimiters.\n$$ 1 + 2 = 3 $$ Aligned equations #  To get aligned equations, you can either write inline LaTeX and use it\u0026rsquo;s provided align environment. This might however make it difficult for MDoc to keep track of equation numbers and cross-referencing, so the recommendation is to use the aligned environment - provided by TeX - inside a $$ delimited display math context. Consider the following example:\nAnd God said $$ \\begin{aligned} \\nabla \\cdot \\vec D \u0026amp;= \\rho_\\nu, \\\\ \\nabla \\cdot \\vec B \u0026amp;= 0, \\\\ \\nabla \\times \\vec E \u0026amp;= -\\frac{\\partial \\vec B}{\\partial t}, \\\\ \\nabla \\times \\vec H \u0026amp;= \\vec J_\\text{free} + \\frac{\\partial \\vec D}{\\partial t}, \\end{aligned} $$ and then there was light. This will get rendered as:\n"},{"id":8,"href":"/mdoc/markdown/paragraphs/","title":"Paragraphs","section":"Markdowns","content":"A paragraph is one or more lines of text followed by one or more blank lines. Newlines are treated as spaces, so you can reflow your paragraphs as you like. Pandoc\u0026rsquo;s Markdown is strict, so if you need a hard line break, you have three options:\n  Use two newlines or more (essentially separating each paragraph by a blank line). This is the recommended and most readable way.\nThis is the first paragraph This is the second paragraph   Use a backslash directly followed by a single newline. Note: in multiline and grid table cells, this is the only way to create a hard line break, since trailing spaces in the cells are ignored.\nThis is the first paragraph\\ This is the second paragraph   Use two or more spaces at the end of a line. This method should only be used if absolutely necessary, as it makes the document source less readable.\n  "},{"id":9,"href":"/mdoc/posts/","title":"Index","section":"MDoc documentation","content":"It is time for academic writing to step out of it\u0026rsquo;s archaic ways and into the modern world! With the rise of Markdown as the de facto markup language of the internet, why should academia lag behind. You should be able to write scientific content, confident that it is publishable both physically and on the web, along with the comfort of knowing the content is readable in it\u0026rsquo;s raw form and will stand the test of time.\nThe issue with $\\LaTeX$ #  $\\LaTeX$ is incredible, but it has three key flaws.\n It\u0026rsquo;s tooling is fractioned (to say the least). It is difficult to learn. The syntax is obscure.  The latter issue is exemplified on it\u0026rsquo;s own introduction page:\n\\documentclass{article} \\title{Cartesian closed categories and the price of eggs} \\author{Jane Doe} \\date{September 1994} \\begin{document} \\maketitle Hello world! \\end{document} All this for a simple hello world\u0026hellip; I am intentionally ignoring the function of all these lines; the content should be front and center - not obscured by a bunch of boilerplate and complex macros. Compare the above with the same document written in Markdown1:\nHello world! How refreshing!\nThe solution #  What if we used TeX/LaTeX only as an intermediate step when building a document? It would function like an assembly language of sorts, and we could happily live in a world of a higher level markup language. Doing this, we\u0026rsquo;d gain the simplicity of Markdown, while still wielding the power of centuries of typesetting expertise that is TeX/LaTeX.\nAt it\u0026rsquo;s core, this is the solution MDoc proposes as a way into the modern world. Through the help of the incredible document converter Pandoc and the amazing TeX/LaTeX engine made by the Tectonic team, we have a solid foundation. MDoc also provides tooling for handling all the nitty gritty of maintaining bigger documents - like bibliography handling, metadata and styling.\n  Without the title, of course, but we\u0026rsquo;ll get to that.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "}]