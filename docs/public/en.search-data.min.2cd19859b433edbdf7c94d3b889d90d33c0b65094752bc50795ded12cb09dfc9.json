[{"id":0,"href":"/mdoc/docs/config/","title":"Config","section":"Docs","content":"In bigger document projects, you will have an mdoc.toml file at the root of your document. This file is meant to configure your document to look and behave the way you want. The available options are:\n title (required) authors date src [build]  filename   [bib]  csl src   [style]  number-sections date-format document-classe   [latex]  packages head title-script    The title field (required) #  This field specifies the title of your document. It will be used for the title at the top of your generated PDF and to derive the filename of your output (unless another filename is specified.) The title can contain inline Markdown formatting.\ntitle = \u0026#34;My awesome document\u0026#34; The authors field #  This is list of strings containing the authors of this document. At the moment, each author is only described by their name, but in the future you will be able to specify more complex information about each author (see #63).\nauthors = [ \u0026#34;John McClane\u0026#34;, \u0026#34;Hans Gruber\u0026#34; ] The date field #  Here you can set the date which will be showed in the title of the document. The date can be any string you want, but if it is formatted according to ISO 8601, additional formatting is supported (see date-format). If this field is set to the string now, the current date and time will be used.\ndate = \u0026#34;now\u0026#34; The src field #  This is a special field that does not need to be explicitly set. It defines which files will get built into your document. src can either be one of the following:\n  Nothing. This will deploy the default behavior where MDoc recursively searches for Markdown-files, starting from the document root. All files will get built into the finished document, ordered alphabetically by their path.\n  A path to a directory, relative to the mdoc.toml file. This will tell MDoc to search for Markdown-files recursively inside only this directory. This is useful if you want to include a README or any other Markdown-file inside the document, but avoid building it as part of the document.\nsrc = \u0026#34;path/to/dir\u0026#34;   A list of paths. Each path is relative to the mdoc.toml file and must point to other valid files. Using this list, you can explicitly define which sections you want included in your document. The order of the list is preserved, which makes this an excellent method to provide a custom (non-alphabetical) order your sections.\nsrc = [ \u0026#34;path/to/first-section.md\u0026#34;, \u0026#34;second-section.md, ]   The [build] table #  This table contains configuration related to the build process of your document.\nThe filename field #  With this field you can set the filename of your built output. You do not need to specify an extension, MDoc will handle that for you based on the output type. By default, MDoc will use the kebab cased title field as the filename\n[build] filename = \u0026#34;my-document\u0026#34; Running mdoc build with the TOML above would build a file called my-document.pdf.\nThe tidy-logs field #  This boolean toggle determines whether you want the log messages of MDoc tidied or not. Tidying involves removing warning messages like Overfull \\hbox and tries to ensure the printed messages are mostly useful. This option is true (turned on) on by default.\n[build] tidy-logs = false The [bib] table #  Under this table, you can set configuration values for MDoc\u0026rsquo;s bibliography handling.\nThe csl field #  If this field points to a valid CSL source, MDoc will use this a the style for your citations. You can set the field to any of these:\n  Any identifier listed in citation-style-language/styles. MDoc will fetch the source and load the CSL style for you. You do not need to specify the .csl extension. The example below sets your style to American Psychological Association 7th edition.\n[bib] csl = \u0026#34;apa\u0026#34;   A valid URL pointing to a CSL file.\n[bib] csl = \u0026#34;https://domain.com/this/points/to/apa.csl\u0026#34;   The path to a CSL in your filesystem. The path is relative to the mdoc.toml file.\n[bib] csl = \u0026#34;./some/dir/apa.csl\u0026#34;   The src field #  NOT YET IMPLEMENTED. MDoc does not read this field yet (see #54): Here you can set the source of your bibliography. The source can be any of the following:\n  Nothing. MDoc will search recursively for .bib and .bibtex files from the root directory. Any bibliography file found will be read and added to the document.\n  A path to a directory, relative to the mdoc.toml file. MDoc will search recursively inside this directory and deploy the method explained above.\n[bib] src = \u0026#34;path/to/bib/dir\u0026#34;   A list of paths. Each path is relative to the mdoc.toml file and must point to valid bibliography files. Each file liste will get read and added to the document.\n[bib] src = [ \u0026#34;path/to/first.bib\u0026#34; \u0026#34;path/second.bibtex\u0026#34; ]   The [style] table #  This table contains all configuration fields related to styling your document.\nThe number-sections field #  A boolean, this field determines whether sections are numbered or not. The default is false.\n[style] number-sections = true The latex table #  The packages field #  The head field #  The title-script field #  For PDF and LaTeX output, a \\maketitle is automatically placed at the top of your document that inserts a title with the metadata you\u0026rsquo;ve set for your document. If you want to replace this, e.g. if you want an external package to generate your title, you can use this field to replace \\maketitle with something of your choice. The content of this field is expected to be valid LaTeX, and will only get reflected in tex and pdf output.\n"},{"id":1,"href":"/mdoc/docs/creating-your-first-document/","title":"Creating Your First Document","section":"Docs","content":"To get started with a new document, run the following command\n$ mdoc init \u0026#34;Awesome document\u0026#34; This will create directory named Awesome document, containing a file called mdoc.toml and a directory called src.\n 📖 If you want to initialize a document in the current working drive, simply run mdzk init without any arguments.\n Next, open some Markdown files in your favorite editor. These can be located anywhere inside the document directory, but the src folder is the conventional place to put them. Go ahead and write content! You can write whatever you want, so make it something fun and be sure to add some $\\TeX$ math or code listings if you want! To get your document built into a PDF, simply run\n$ mdoc build This will produce a PDF called awesome-document.pdf in your root directory. Open it with your preferred PDF viewer and marvel at how simple it was to create this beautiful PDF - no \\begin{document} needed!\nNow, you might not be blown away yet\u0026hellip; How do I configure this document to look the way I like? Have a look inside mdoc.toml. This file is where you\u0026rsquo;ll find your document\u0026rsquo;s metadata, build instructions, styling, bibliography details and many more options. Try changing the title field into something else, and run mdoc build again to see the changes get applied.\n"},{"id":2,"href":"/mdoc/docs/getting-started/","title":"Getting Started","section":"Docs","content":"This section will help you setup and get started with MDoc.\n Installing Creating your first document The MDoc workflow  "},{"id":3,"href":"/mdoc/docs/installing/","title":"Installing","section":"Docs","content":"For the time being, you will have to compile MDoc yourself to install it. It is published on crates.io, so this is done easily by running\n$ cargo install mdoc MDoc depends on Pandoc for parsing the Markdown content. Have a look at Installing Pandoc and make sure it is available in your PATH by running pandoc -v.\nBuilding from source #  If you want to compile from upstream, clone the repo and install from path with these commands:\n$ git clone https://github.com/kmaasrud/mdoc.git $ cd mdoc $ cargo install --path . Tectonic needs a few third party C dependencies when building. Depending on your platform, you might not have them available. You can either install them manually, or you can try one of the methods explained below.\nUsing Nix #  For Unix-based systems (or Windows with WSL,) this method is definitely recommended.\n  Install Nix by following the instructions for your platform here.\n  Clone the MDoc repo.\n$ git clone https://github.com/kmaasrud/mdoc.git $ cd mdoc   Run the following command:\n$ nix --experimental-features \u0026#34;nix-command flakes\u0026#34; develop   You will now get placed in a shell with all the required dependencies installed. Running cargo build --release should compile MDoc for you, and you can find the binary in target/release.\n 📖 All dependencies are compiled statically into the binary with the exception of Pandoc. This means you can safely exit the Nix shell and run your compiled MDoc, as long as you have Pandoc installed on your system.\n Using VCPKG #  A fully cross-platform solution is to use VCPKG to handle the dependencies. First install cargo-vcpkg by running\n$ cargo install cargo-vcpkg Then obtain the dependencies with\n$ cargo vcpkg build Following this, you need to set a couple of environment variables that makes sure you use vcpkg when compiling. These are the following:\n$ export VCPKG_ROOT=\u0026#34;${CARGO_TARGET_DIR:-$(pwd)/target}/vcpkg\u0026#34; $ export TECTONIC_DEP_BACKEND=vcpkg If you are building on Windows, you have to run with the following environment variable exported as well:\n$ export RUSTFLAGS=\u0026#39;-Ctarget-feature=+crt-static\u0026#39; After all this, you should be ready to compile normally.\n"},{"id":4,"href":"/mdoc/docs/terminology/","title":"Terminology","section":"Docs","content":"Throughout the documentation, I will use the following terminology:\n Document: A collection of files that get built into a PDF (or other forms of output). Chapter: A subdivision of a document, likely represented by a single file.  "},{"id":5,"href":"/mdoc/markdown/block-quotes/","title":"Block Quotes","section":"Markdowns","content":"Pandoc Markdown uses email conventions for block quotes. A block quotation is one or more paragraphs or other block elements (such as lists or headings), with each line preceded by a \u0026gt; character and an optional space.\n\u0026gt; This is a block quote. This \u0026gt; paragraph has two lines. \u0026gt; \u0026gt; 1. This is a list inside a block quote. \u0026gt; 2. Second item. Block quotes can contain most other Markdown elements. Among them are other blockquotes, which means they can be nested, like this:\n\u0026gt; This is a block quote. \u0026gt; \u0026gt; \u0026gt; A block quote within a block quote. Standard Markdown syntax does not require a blank line before a block quote. MDoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a \u0026gt; to end up at the beginning of a line by accident (perhaps through line wrapping).\n"},{"id":6,"href":"/mdoc/markdown/code/","title":"Code","section":"Markdowns","content":"Indented code blocks #  A block of text indented four spaces (or one tab) is treated as a code block. For example,\nParagraph here if (a \u0026gt; 3) { moveShip(5 * gravity, DOWN); } The initial (four space or one tab) indentation is not considered part of the verbatim text, and is removed in the output.\nFenced code blocks #  In addition to standard indented code blocks, you can write fenced code blocks. These begin with a row of three or more backticks (```) and end with a row of backticks that must be at least as long as the starting row. Everything between these lines is treated as code and no indentation is necessary:\n``` if (a \u0026gt; 3) { moveShip(5 * gravity, DOWN); } ``` Like regular code blocks, fenced code blocks must be separated from surrounding text by blank lines. If the code itself contains a row of backticks, just use a longer row of tildes or backticks at the start and end:\n`````` ``` if (a \u0026gt; 3) { moveShip(5 * gravity, DOWN); } ``` `````` If you want to specify the language of the code block, you can write\n```rust match foo { Some(a) =\u0026gt; println!(\u0026#34;Something: {}\u0026#34;, a), None =\u0026gt; println!(\u0026#34;Nothing\u0026#34;) } ``` This is just a shorthand for attaching the language as a class, like {.rust}. You can attach further attributes to a fenced code block by using this syntax:\n```{#mycode .haskell .numberLines startFrom=\u0026#34;100\u0026#34;} qsort [] = [] qsort (x:xs) = qsort (filter (\u0026lt; x) xs) ++ [x] ++ qsort (filter (\u0026gt;= x) xs) ``` Here mycode is an identifier, haskell and numberLines are classes, and startFrom is an attribute with value 100.\nInline code #  To write inline code, put the text between backticks, e.g.\nWhat is the difference between `\u0026gt;\u0026gt;=` and `\u0026gt;\u0026gt;`? If you want to include a literal backtick as part of the code, use double backticks (the spaces before and after the enclosed backtick will be ignored.)\nHere is a literal backtick `` ` ``.  📖 Backslash-escapes (and other Markdown constructs) do not work inside verbatim (code) contexts:\nThis is a backslash followed by an asterisk: `\\*`.  As with code blocks, you can attach attributes to inline code as well. The syntax is similar:\nThis is Haskell code: `\u0026lt;$\u0026gt;`{.haskell} "},{"id":7,"href":"/mdoc/markdown/formatting/","title":"Formatting","section":"Markdowns","content":"Bold and italic text #  To make text italic, surround it with single * or _ symbols, like this:\nThis text is _italicized with underscores_, and this is *italicized with asterisks*. Surrounding with double * or _ symbols, produces bold text, e.g.\nThis is **bold text** and __with underscores__. A * or _ character surrounded by spaces, or backslash-escaped, will not trigger emphasis:\nThis is * not emphasized *, and \\*neither is this\\*. Because _ is sometimes used inside words or identifiers, Pandoc will not interpret _ as a marker if it\u0026rsquo;s surrounded by characters. For this reason, it is advised to use * to avoid having to shift markers throughout the text.\nStrikeout #  You can strikeout text by surrounding it with ~~. For example:\nThis ~~is deleted text.~~ Superscript and subscript #  Superscripts may be written by surrounding the superscripted text by ^ characters (intuitively enough); subscripts may be written by surrounding the subscripted text with ~ characters (not as intuitive.) Thus, for example,\nH~2~O is a liquid. 2^10^ is 1024.  📖 The text between ^...^ or ~...~ may not contain spaces or newlines. If the superscripted or subscripted text contains spaces, these spaces must be escaped with backslashes. (This is to prevent accidental superscripting and subscripting through the ordinary use of ~ and ^, as well as bad interactions with footnotes.) Thus, if you want the letter P with ‘a cat’ in subscripts, you write P~a\\ cat~, not P~a cat~.\n "},{"id":8,"href":"/mdoc/markdown/headings/","title":"Headings","section":"Markdowns","content":"There are two kinds of headings: Setext and ATX. They are equivalent, so choose the style you prefer. Both heading types can contain inline formatting or math.\nATX headers #  An ATX heading consists of one to six # signs and a line of text, optionally followed by any number of # signs. The number of # signs at the beginning of the line is the heading level:\n## A level-two heading  A paragraph or some other content. ### A level-three heading ###  More content...  📖 MDoc requires a blank line before and after a heading (except, of course, at the beginning of the document.) Additionally, a space between the opening # signs of an ATX heading and the heading text is required.\n Setext headers #  A setext-style heading is a line of text underlined with a row of = signs (for a level-one heading) or - signs (for a level-two heading):\nA level-one heading =================== A paragraph or some content. A level-two heading ------------------- More content... Identifiers #  Headings can be assigned attributes using the following syntax at the end of the line containing the heading text:\n{#identifier .class .class key=value key=value}  Thus, for example, the following headings will all be assigned the identifier foo:\n# My heading {#foo} ## My heading ## {#foo}  My other heading {#foo} ---------------  📖 All headers are automatically assigned an identifier corresponding to their kebab cased title (e.g. # This is my header! will have the identifier #this-is-my-header.)\n Numbering of headers #  You can enable numbering of headers by setting number-sections = true under [style] in mdoc.toml. If you want to avoid numbering on certain headers, simply specify the class unnumbered on them. A single hyphen ({-}) is equivalent to this, so the following headers:\n# My heading {-} # My heading {.unnumbered} will never be numbered.\n"},{"id":9,"href":"/mdoc/markdown/images-and-figures/","title":"Images and Figures","section":"Markdowns","content":"A link immediately preceded by a ! will be treated as an image.\n![](image-path.jpg) ![movie reel] [movie reel]: movie.gif ![figure caption](another-image.png) As you can see, you set the caption of the figure within the link text field. The attribute syntax is also supported on images, meaning you can define identifiers, classes and key-value pairs on images as well.\nAn inline ![image](foo.jpg){#id .class width=30 height=20px} and a reference ![image][ref] with attributes. [ref]: foo.jpg \u0026#34;optional title\u0026#34; {#id .class key=val key2=\u0026#34;val 2\u0026#34;} Sizing #  An image can be resized by utilizing the width and height keys. Say you want to insert an image, but make it half as big.\n![](file.jpg){ width=50% } 100% is defined by the text width, meaning the above will output a centered image that has half the width of the surrounding text.\n"},{"id":10,"href":"/mdoc/markdown/lists/","title":"Lists","section":"Markdowns","content":"Ordered lists #  To make an ordered list of items, write a decimal number, followed by a period, a space and the content you want as part of that list item.\n1. one 2. two 3. three This will produce a “compact” list. If you want a “loose” list, in which each item is formatted as a paragraph, put spaces between the items:\n5. one 34. two 8. three Only the first number is parsed, which means the above list will be formatted as the sequence 5., 6. and 7.. You can make use of this by specifying only the starting number, and using a #. in place of the following numbers. However, in the name of legibilty I recommend writing the numbers as you intend them.\nMultiple styles of alphanumeric sequences are allowed. These are uppercase/lowercase letters and roman numerals, in addition to normal Arabic numerals. You can use the regular dot notation (2.), enclose the index in parentheses ((i)) or follow it by a single closing-parentheses (a)). This variation of styles is utilized when one needs a new list directly following another or to make a sublist. The following are all valid lists:\n9) Ninth 10) Tenth 11) Eleventh i. subone ii. subtwo iii. subthree (2) Two (5) Three 1. One #. Two The above will get rendered as such:\n Unordered lists #  An unordered list is a list of bulleted list items that are not numbered. They work exactly like ordered lists (except the numbering of course,) but use *, + or - as markers.\n- one - two - three The markers need not be flush with the left margin; they may be indented one, two, or three spaces. The marker must be followed by whitespace.\nTask lists #  You can also make unordered lists that have a checkmark, in order to create a task list. The Github-Flavored Markdown syntax is used, which is as follows\n- [ ] an unchecked task list item - [x] checked item  Block content in lists #  A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented to line up with the first non-space content after the list marker.\n* First paragraph. Continued. * Second paragraph. With a code block, which must be indented eight spaces: { code } List items may include other lists, like in the last ordered list example. In this case the preceding blank line is optional. The nested list must be indented to line up with the first non-space character after the list marker of the containing list item.\n* fruits + apples - macintosh - red delicious + pears + peaches * vegetables + broccoli + chard Markdown allows you to write list items “lazily,” and reflow your text with a single newline instead of indenting continuation lines. However, if there are multiple paragraphs or other blocks in a list item, the first line of each must be indented.\n+ A lazy, lazy, list item. + Another one; this looks bad but is legal. Second paragraph of second list item. But what if you want to put an indented code block directly after a list? Consider the following:\n- item one - item two { my code block } { my code block } will here get treated as the second paragraph of the second list item. In order to “cut off” the list after item two, you can insert some non-indented content (an HTML comment would be a great choice,) which won’t produce visible output in any format. An example of this could be:\n- item one - item two \u0026lt;!-- end of list --\u0026gt; { my code block }  Extra list types #  Definition lists #  Definition lists are made of terms and definitions of these terms, much like in a dictionary. A simple definition list is made of a single-line term followed by a colon and the definition for that term.\nApple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. { some code, part of Definition 2 } Third paragraph of definition 2. Each term must fit on one line, which may optionally be followed by a blank line, and must be followed by one or more definitions. A definition begins with a : or ~, which may be indented one or two spaces. A term may have multiple definitions, and each definition may consist of one or more block elements (paragraph, code block, list, etc.), each indented four spaces or one tab stop. The body of the definition (including the first line, aside from the : or ~) should be indented four spaces. However, as with other Markdown lists, you can “lazily” omit indentation except at the beginning of a paragraph or other block element:\nTerm 1 : Definition with lazy continuation. Second paragraph of the definition. If you leave space before the definition (as in the example above), the text of the definition will be treated as a paragraph. In some output formats, this will mean greater spacing between term/definition pairs. For a more compact definition list, omit the space before the definition:\nTerm 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b Note that space between items in a definition list is required.\nNumbered example lists #  The special list marker @ can be used for sequentially numbered examples. The first list item with a @ marker will be numbered 1, the next 2, and so on, throughout the document. The numbered examples need not occur in a single list; each new list using @ will take up where the last stopped. So, for example:\n(@) My first example will be numbered (1). (@) My second example will be numbered (2). Explanation of examples. (@) My third example will be numbered (3). Numbered examples can be labeled and referred to elsewhere in the document:\n(@good) This is a good example. As (@good) illustrates, ... The label can be any string of alphanumeric characters, underscores, or hyphens.\n 📖 continuation paragraphs in example lists must always be indented four spaces, regardless of the length of the list marker. This is because example labels tend to be long, and indenting content to the first non-space character after the label would be awkward.\n "},{"id":11,"href":"/mdoc/markdown/markdown/","title":"Markdown","section":"Markdowns","content":"MDoc uses Pandoc Markdown (with a few carefully selected additions) as it\u0026rsquo;s markup language. This choice was a simple one; the creator of Markdown, John Gruber, puts it best himself:\n Markdown is intended to be as easy-to-read and easy-to-write as is feasible. Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions.\n This is at the heart of most of my choices when creating MDoc, as I\u0026rsquo;m sure also was the case for John MacFarlane when he made the canonical additions that make up Pandoc Markdown.\nBut why yet another Markdown flavor? Well, the goals of Pandoc, and subsequently of MDoc, is to produce a more complex output than a simple HTML page. To conform with the abovementioned philosophy, writing inline HTML or TeX (although permitted) to achieve this complexity, is simply not good enough. Thus, a few additions are needed, but should come as second nature to those already familiar with Markdown.\nThis part of the documentation contains a modified copy of Pandoc\u0026rsquo;s User Guide. I\u0026rsquo;ve done this to explain the syntax at the perspective of MDoc\u0026rsquo;s goals and to specify the changes and conventions MDoc introduces.\n"},{"id":12,"href":"/mdoc/markdown/math/","title":"Math","section":"Markdowns","content":"Inline math #  Anything between two $ characters will be treated as TeX math. For an excellent reference on what is possible here, have a look at the TeX reference card.\nThe opening $ must have a non-space character immediately to its right, while the closing $ must have a non-space character immediately to its left, and must not be followed immediately by a digit. Thus, $20,000 and $30,000 won’t parse as math. If for some reason you need to enclose text in literal $ characters, escape them with a blackslash and they won’t be treated as math delimiters.\nHere is some text and here is some math: $E = mc^2$. Display math #  For display math, use $$ delimiters. In this case, the delimiters may be separated from the formula by whitespace. However, there can be no blank lines betwen the opening and closing delimiters.\n$$ 1 + 2 = 3 $$ Aligned equations #  To get aligned equations, you can either write inline LaTeX and use it\u0026rsquo;s provided align environment. This might however make it difficult for MDoc to keep track of equation numbers and cross-referencing, so the recommendation is to use the aligned environment - provided by TeX - inside a $$ delimited display math context. Consider the following example:\nAnd God said $$ \\begin{aligned} \\nabla \\cdot \\vec D \u0026amp;= \\rho_\\nu, \\\\ \\nabla \\cdot \\vec B \u0026amp;= 0, \\\\ \\nabla \\times \\vec E \u0026amp;= -\\frac{\\partial \\vec B}{\\partial t}, \\\\ \\nabla \\times \\vec H \u0026amp;= \\vec J_\\text{free} + \\frac{\\partial \\vec D}{\\partial t}, \\end{aligned} $$ and then there was light. This will get rendered as:\n"},{"id":13,"href":"/mdoc/markdown/paragraphs/","title":"Paragraphs","section":"Markdowns","content":"A paragraph is one or more lines of text followed by one or more blank lines. Newlines are treated as spaces, so you can reflow your paragraphs as you like. Pandoc\u0026rsquo;s Markdown is strict, so if you need a hard line break, you have three options:\n  Use two newlines or more (essentially separating each paragraph by a blank line). This is the recommended and most readable way.\nThis is the first paragraph This is the second paragraph   Use a backslash directly followed by a single newline. Note: in multiline and grid table cells, this is the only way to create a hard line break, since trailing spaces in the cells are ignored.\nThis is the first paragraph\\ This is the second paragraph   Use two or more spaces at the end of a line. This method should only be used if absolutely necessary, as it makes the document source less readable.\n  "}]